/******************************************************************************
WILCOX, ALEXANDER 
Objective #10 Find Children
*******************************************************************************/
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
struct person{  // define the UDT 
    string pName;
    char gender; 
    long pSSN;
    string DOB;
    float height; 
    float weight;
    long fSSN;
    long mSSN;
    person* next;
};

void find_parents(person*, person*);
void find_children(person*, person*);
void find_siblings(person*, person*);

int main()
{
    int pcount = 0;
    person* head = new person; // independent person 
    head->next = NULL; 
    
    person* current = head; person* newPerson ;  
    // assign data values 
    string fLine;
    ifstream fPeople;
    fPeople.open("people.txt"); 
    
    while (!fPeople.eof())
    {
        getline(fPeople, fLine); current->pName = fLine;
        getline(fPeople, fLine); current->gender = fLine[0];
        
        getline(fPeople, fLine); current->pSSN = stol(fLine);
        getline(fPeople, fLine); current->DOB = fLine;
        
        getline(fPeople, fLine); current->height = stof(fLine);
        getline(fPeople, fLine); current->weight = stof(fLine);
        
        getline(fPeople, fLine); current->fSSN = stol(fLine);
        getline(fPeople, fLine); current->mSSN = stol(fLine);
        
        pcount++;
        
        newPerson = new person; // independent person 
        current->next = newPerson; // linking persons 
        current = newPerson; 
    }
    
    fPeople.close(); 
    
    current = head; person* prevPerson ;  
    while (current->next != NULL)
    {  // (current != null) vs. (current->next != NULL)
        prevPerson = current;
        current = current->next;
    } 
    
    prevPerson->next = NULL; 
    delete newPerson; 
    current = head; 
    cout << "Linked List completed" << endl;

    // check to see if linked list is correct



    for(int x = 10;x>9;x++)
    {
        int selection;
        cout<<"\n Menu";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\n|***************************************************************|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|*|  1 - Display the people                                   |*|";
        cout<<"\n|*|  2 - Prompt for removing a person                         |*|";
        cout<<"\n|*|  3 - Prompt for adding a person                           |*|";
        cout<<"\n|*|  4 - Add new people to list in bulk from supplemetary file|*|";
        cout<<"\n|*|  5 - Edit a person                                        |*|";
        cout<<"\n|*|  6 - Display all people eligible for social security      |*|";
        cout<<"\n|*|  7 - Display all people at risk of cardiovascular disease |*|";
        cout<<"\n|*|  8 - Display the male:female ratio of the population      |*|";
        cout<<"\n|*|  9 - Find the parents of a person                         |*|";
        cout<<"\n|*| 10 - Find all children of a person                        |*|";
        cout<<"\n|*| 11 - Find all siblings of a person                        |*|";
        cout<<"\n|*| 12 - Find all extended family of a person                 |*|";
        cout<<"\n|*| 99 - Exit                                                 |*|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|***************************************************************|";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\nEnter selection: ";

  // read the input

        cin>>selection;

        switch(selection)
        {
            case 1:{
            while (current != NULL){
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
            << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
            current = current->next; 
            }
        }
            break;
            
            case 2 :{cout<<"\n #2 works";}
            break;
            case 3 :{cout<<"\n #3 works";}
            break;
            case 4 :{cout<<"\n #4 works";}
            break;
            case 5 :{cout<<"\n #5 works";}
            break;
            case 6 :{cout<<"\n #6 works";}
            break;
            case 7 :{cout<<"\n #7 works";}
            break;
            case 8 :{cout<<"\n #8 works";}
            break;
            case 9 :{ find_parents(head, current);}
            break;
            case 10 :{ find_children(head, current);}
            break;
            case 11 :{ find_siblings(head, current);}
            break;
            case 12 :{cout<<"\n #12 work";}
            break; 
            case 99 :{cout<<"\n #99 works";return 0;}
            break;

            default : cout<<"\n Invalid selection";
        }
  // no break in the default case

    }
    cout<<"\n";

return 0;
}

void find_parents(person* head, person* current)
{
    
    current = head; 
    long inputSSN;
    cout << endl << "Please enter an SSN to find their parents. Type 99 to go back to the menu: ";
    cin >> inputSSN;

    long index1, index2;
    string index3;
    while (current != NULL)
    {
        if (inputSSN == current->pSSN)
            {
                index1 = current->mSSN;
                index2 = current->fSSN;
                index3 = current->pName;
            }
        if (inputSSN == 99) break;
        current = current->next; 
    }
    
    if (index1 == 0) cout << current->pName << " does not have a mother." << endl << " Father: " << current->fSSN << endl;
    else if (index2 == 0) cout << current->pName << " does not have a father." << endl << " Mother: " << current->mSSN << endl;
    else
    cout << "Client: " << index3 << " | Mother: " << index1 << " | " << "Father: " << index2 << " | " << endl;

}

void find_children(person* head, person* current)
{
    current = head;
    long inputSSN;
    
    cout << endl << "Please enter an SSN to find their children. Type 99 to go back to the menu: ";
    cin >> inputSSN;
    
    if (inputSSN == 99) return;
    int childCount = 0;
    string indexName;
    
    while (current != NULL)
    {
        if (inputSSN == current->pSSN) indexName = current->pName;
        current = current->next;
    }
    
    current = head;
    while (current != NULL)
    {
        if (inputSSN != current->fSSN) childCount--; 
        if (inputSSN != current->mSSN) childCount++;
        current = current->next; 
    } 

    current = head;
    if (childCount == 0) cout << indexName << " does not have children." << endl;
    else
    {
        cout << "Parent: \n" << indexName << endl << endl << "Children: \n";
        while (current != NULL)
        {
            if (inputSSN == current->fSSN || inputSSN == current->mSSN) cout << current->pName << " | ";
            current = current->next; 
        }
        cout << endl;
    }
}

void find_siblings(person* head, person* current)
{
    current = head;
    long inputSSN;
    
    cout << endl << "Please enter an SSN to find their siblings. Type 99 to go back to the menu: ";
    cin >> inputSSN;
    
    if (inputSSN == 99) return;
    
    int numCount = -1;
    long index1, index2;
    string index3;
    
    while (current != NULL)
    {
        if (inputSSN == current->pSSN) 
        {
            index1 = current->mSSN;
            index2 = current->fSSN;
            index3 = current->pName;
            numCount++;
        }
        current = current->next;
    }
    
    current = head;
    if (numCount == 0)
    {
        cout << index3 << "'s siblings are: ";
        while (current != NULL)
        {
            if (index2 == current->fSSN || index1 == current->mSSN) 
            {
                if (current->pName == index3) cout << "";
                else cout << current->pName << " | ";
            }
            current = current->next; 
        }
    }
    else  cout << index3 << " does not have siblings.";
}
