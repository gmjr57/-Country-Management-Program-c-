/******************************************************************************

*******************************************************************************/
#include <iostream>
#include <fstream>
#include <string>
#include <time.h>
#include <conio.h>
#include <iomanip>
#include <chrono>

using namespace std;
struct person{  // define the UDT 
    string pName;
    char gender; 
    long pSSN;
    string DOB;
    float height; 
    float weight;
    long fSSN;
    long mSSN;
    person* next;
};
int cardio_check(person*,int);
int get_ratio(person*, int);
int social_check(person*, int);
void display_list(person*);
bool change_info(person*);
bool remove_person(person*);
void find_parents(int, person*, person*);
void find_children(person*, person*);
int main()
{
    person* head = new person; // independent person 
    head->next = NULL; 
    person* current = head; person* newPerson ;  
    // assign data values 
    int pcount = 0;
    string fLine;
    ifstream fPeople;
    fPeople.open("people.txt"); 
    
    while (!fPeople.eof())
    {
        getline( fPeople, fLine); 
        current->pName = fLine;
        getline( fPeople, fLine); 
        current->gender = fLine[0];
        getline( fPeople, fLine); 
        current->pSSN = stol(fLine);
        getline( fPeople, fLine); 
        current->DOB = fLine;
        getline( fPeople, fLine); 
        current->height = stof(fLine);
        getline( fPeople, fLine); 
        current->weight = stof(fLine);
        getline( fPeople, fLine); 
        current->fSSN = stol(fLine);
        getline( fPeople, fLine); 
        current->mSSN = stol(fLine);
        
        newPerson = new person; // independent person 
        current->next = newPerson; // linking persons 
        current = newPerson; 
        pcount++;
    }
    
    fPeople.close(); 
    
    current = head; person* prevPerson ;  
    while (current->next != NULL)
    {  // (current != null) vs. (current->next != NULL)
        prevPerson = current;
        current = current->next;
    } 
    
    prevPerson->next = NULL; 
    delete newPerson; 
    current = head; 
    cout << "Linked List completed" << endl;

    

    for(int x = 10;x>9;x++)
    {
        int selection;
        cout<<"\n Menu";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\n|***************************************************************|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|*|  1 - Display the people                                   |*|";
        cout<<"\n|*|  2 - Prompt for removing a person                         |*|";
        cout<<"\n|*|  3 - Prompt for adding a person                           |*|";
        cout<<"\n|*|  4 - Add new people to list in bulk from supplemetary file|*|";
        cout<<"\n|*|  5 - Edit a person                                        |*|";
        cout<<"\n|*|  6 - Display all people eligible for social security      |*|";
        cout<<"\n|*|  7 - Display all people at risk of cardiovascular disease |*|";
        cout<<"\n|*|  8 - Display the male:female ratio of the population      |*|";
        cout<<"\n|*|  9 - Find the parents of a person                         |*|";
        cout<<"\n|*| 10 - Find all children of a person                        |*|";
        cout<<"\n|*| 11 - Find all siblings of a person                        |*|";
        cout<<"\n|*| 12 - Find all extended family of a person                 |*|";
        cout<<"\n|*| 99 - Exit                                                 |*|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|***************************************************************|";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\n Enter selection: ";
  // read the input
        cin>>selection;
        switch(selection)
        {
            case 1 :{cout<<"\n #1 works\n";
            display_list(head); break;}
            case 2 :
            {cout<<"\n #2 works";
            /*remove_person(head)*/
            break;}
            case 3 :{cout<<"\n #3 works";}
            break;
            case 4 :{cout<<"\n #4 works";}
            break;
            case 5 :
            {cout<<"\n Edit Person Information" << endl;
             cout<<"=============================\n";
            change_info(head);break;}
            case 6 :
            {cout<<"\n People Eligible for Social Security";
             cout<<"\n=====================================\n";
             social_check(head, pcount);
            break;
            }
            case 7 :
            {cout<<"\n People At Risk Of Cardiovascular Disease";
             cout<<"\n==========================================\n";
             cardio_check(head, pcount);
             break;
            }
            case 8 :
            {cout<<"\nThe Male to Female\n";
             cout<<"======================\n";
             get_ratio(head, pcount);
             break;
            }
            case 9 :{ find_parents(pcount, head, current); }
            break;
            case 10 :{ find_children(head, current); }
            break;
            case 11 :{cout<<"\n #11 works";}
            break;
            case 12 :{cout<<"\n #12 work";}
            break; 
            case 99 :{cout<<"\n #99 works";return 0;}
            break;
            default : cout<<"\n Invalid selection";
        }
  // no break in the default case
    }
cout<<"\n";
return 0;
}
int get_ratio(person* head, int pcount)
{
            person* current= head;
            float Male=0;
            float Female=0;
            current = head;
            for (int x=0;x<pcount;x++)
            {
                if (current->gender == 'M')
                {
                    Male++;
                }
                if (current-> gender =='F')
                {
                Female++;
                }
            // cout << current->gender<<endl;
            current = current->next;
            }    
            cout<<Male<<" Men";
            cout<<" : "<<Female<< " Women"<<endl;
            cout<< "Females per thousand males: "<<(Female/Male) * 1000<<endl;
           
            
}
int cardio_check(person* head, int pcount)
{
    person* current= head;
    current = head;
    for (int x=0;x<pcount;x++)
     {
        float W = current->weight;
        float H = current->height;
        int BMI;
        BMI = (W / (H*H)*703);
        if (BMI >= 27)
        {
        cout<< current->pName<<endl;
        cout<<"   BMI:";
        cout<< BMI << endl<<endl;
        }
        //weight (lb) / [height (in)]2 x 703
        current = current->next;
        BMI = 0;
     } 
}
int social_check(person* head, int pcount)
{
     person* current= head;
    current = head;
            for (int x=0;x<pcount;x++)
            {
                string str = current->DOB;
                string delim = "/";
                int dd, mm, yyyy;
                size_t pos;
                pos = str.find(delim);
                dd = stoi(str.substr(pos + 4, 2));
                // dd = stoi();
                mm = stoi(str.substr(pos + 1, 2));
                pos = str.find(delim);
                yyyy = stoi(str.substr(pos - 4,4));
                // std::cout << yyyy<<' '<<mm<<' '<<dd<<endl<<endl;
                // current=current->next;
                time_t rawtime;
                struct tm * timeinfo;
                char buffer [80];
                time (&rawtime);
                timeinfo = localtime (&rawtime);
                strftime (buffer,80,"%F",timeinfo);
                string str1 = buffer;
                // cout<<str1;
                string delim1 = "-";
                int dd1, mm1, yyyy1;
                size_t pos1;
                pos1 = str1.find(delim1);
                dd1 = stoi(str1.substr(pos1 + 4, 2));
                mm1 = stoi(str1.substr(pos1 + 1, 2));
                pos1 = str1.find(delim1);
                yyyy1 = stoi(str1.substr(pos1 - 4,4));
                // std::cout <<yyyy1<<'-'<<mm1<<'-'<<dd1<<endl;
                int years = (yyyy1 - yyyy) - 1;
                if (mm1 >= mm)
                {
                    if (dd1 >=dd)
                    {
                        years++;
                    }
                }
                // cout << years<<endl;
                if (years >= 65)
                {
                    cout<<current->pName<<endl;
                    cout<<"Age: "<< years<<endl;
                }
                current=current->next;
                
                
                
            }
}
void display_list(person* head)
{
  person* current= head;
  person* index = NULL; int temp3, temp5, temp6, temp7, temp8, temp2; string temp, temp4;
            while(current != NULL) {
            index = current->next;
                while(index!= NULL) {
                    if(current->pSSN > index->pSSN) {

                        temp = current->pName;
                        current->pName = index->pName;
                        index->pName = temp;
                        
                        temp2 = current->gender;
                        current->gender = index->gender;
                        index->gender = temp2;
                        
                        temp3 = current->pSSN;
                        current->pSSN = index->pSSN;
                        index->pSSN = temp3;
                        
                        temp4 = current->DOB;
                        current->DOB = index->DOB;
                        index->DOB = temp4;
                        
                        temp5 = current->height;
                        current->height = index->height;
                        index->height = temp5;
                        
                        temp6 = current->weight;
                        current->weight = index->weight;
                        index->weight = temp6;
                        
                        temp7 = current->fSSN;
                        current->fSSN = index->fSSN;
                        index->fSSN = temp7;
                        
                        temp8 = current->mSSN;
                        current->mSSN = index->mSSN;
                        index->mSSN = temp8;
                    }    
                    index = index->next;
                }
                current = current->next;
            }
            current = head;
            cout << '\n';
            
            
            while (current != NULL)
            {
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
                << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
                current = current->next; 
            } 
            current = head;  
}
bool change_info(person* head)
{
    person* current = head;
    int inp;
    cout << "Please enter a SSN: " << endl;
    cin >> inp;
    cin.ignore();
    
    while (current != NULL) {
        if (current->pSSN == inp) {
            string new_pName;
            float new_height, new_weight;
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
        << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
            
            cout << "Please enter new name: ";
            getline(cin, new_pName);
            current->pName = new_pName;
            
            
            cout << "Please enter new height: ";
            cin >> new_height;
            current->height = new_height;
            
            cout << "Please enter new weight: ";
            cin >> new_weight;
            current->weight = new_weight;
            
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
        << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
        
        cout << "Info Successfully Changed!" << endl;
            return true;
        }
        current = current->next;
    }
    cout << "SSN Not Found" << endl;
    return false;
}
void find_parents(int num, person* head, person* current)
{
    
    current = head; 
    long inputSSN;
    cout << endl << "Please enter an SSN to find their parents. Type 99 to go back to the menu: ";
    cin >> inputSSN;
    person client[num];

    while (current != NULL)
    {
        if (inputSSN == current->pSSN)
            {
                if (current->mSSN == 0)
                {
                    cout << current->pName << " does not have a mother." << endl << " Father: " << current->fSSN << endl; continue;
                }
                if (current->fSSN == 0)
                {
                    cout << current->pName << " does not have a father." << endl << " Mother: " << current->mSSN << endl; continue;
                }
                else
                cout << "Client: " << current->pName << " | Mother: " << current->mSSN << " | " << "Father: " << current->fSSN << " | " << endl;
            }
        if (inputSSN == 99) break;
        current = current->next; 
    }
}
void find_children(person* head, person* current)
{
    current = head;
    long inputSSN;
    
    cout << endl << "Please enter an SSN to find their children: ";
    cin >> inputSSN;
    
    int childCount = 0;
    string indexName;
    
    while (current != NULL)
    {
        if (inputSSN == current->pSSN) indexName = current->pName;
        current = current->next;
    }
    
    current = head;
    while (current != NULL)
    {
        if (inputSSN != current->fSSN) childCount--; 
        if (inputSSN != current->mSSN) childCount++;
        current = current->next; 
    } 

    current = head;
    if (childCount == 0) cout << indexName << " does not have children." << endl;
    else
    {
        cout << "Parent: \n" << indexName << endl << endl << "Children: \n";
        while (current != NULL)
        {
            if (inputSSN == current->fSSN || inputSSN == current->mSSN) cout << current->pName << " | ";
            current = current->next; 
        }
        cout << endl;
    }
}
// bool remove_person(person* head)
// {
    
// person* current = head;
//     int inp;
//     cout << "Please enter a SSN: " << endl;
//     cin >> inp;
//     cin.ignore();
    
//     while (current != NULL) {
//         if (current->pSSN == inp) {
//             string temp = current->pName;
//             delete temp;
//             // delete current->gender;
//             // delete current->pSSN;
//             // delete current->DOB;
//             // delete current->height;
//             // delete current->weight;
//             // delete current->fSSN;
//             // delete current->mSSN;
            
//             cout << "person deleted";
//             return true;
//         }
//         current = current->next;
//     }
//     cout << "SSN Not Found" << endl;
//     return false;
// }
