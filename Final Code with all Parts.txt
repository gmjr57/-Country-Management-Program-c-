/******************************************************************************
Created by Grahm Rusnak, Hunter Owings, Kyree Collins, and Alex Wilcox

*******************************************************************************/
#include <iostream>
#include <fstream>
#include <string>
#include <time.h>
#include <conio.h>
#include <iomanip>
#include <chrono>

using namespace std;
struct person{  // define the UDT 
    string pName;
    char gender; 
    long pSSN;
    string DOB;
    float height; 
    float weight;
    long fSSN;
    long mSSN;
    person* next;
};
int cardio_check(person*,int);
int get_ratio(person*, int);
int social_check(person*, int);
void display_list(person*);
bool change_info(person*);
person* removePerson(person**); 
void find_parents(int, person*, person*);
void find_children(person*, person*);
person* addPerson(person**);
person* add_group(person**, ifstream&);
void find_siblings(person*, person*);
void find_exfamily(person*);
int main()
{
    person* head = new person; // independent person 
    head->next = NULL; 
    person* current = head; person* newPerson ;  
    // assign data values 
    int pcount = 0;
    string fLine;
    ifstream fPeople;
    fPeople.open("people.txt"); 
    
    while (!fPeople.eof())
    {
        getline( fPeople, fLine); 
        current->pName = fLine;
        getline( fPeople, fLine); 
        current->gender = fLine[0];
        getline( fPeople, fLine); 
        current->pSSN = stol(fLine);
        getline( fPeople, fLine); 
        current->DOB = fLine;
        getline( fPeople, fLine); 
        current->height = stof(fLine);
        getline( fPeople, fLine); 
        current->weight = stof(fLine);
        getline( fPeople, fLine); 
        current->fSSN = stol(fLine);
        getline( fPeople, fLine); 
        current->mSSN = stol(fLine);
        
        newPerson = new person; // independent person 
        current->next = newPerson; // linking persons 
        current = newPerson; 
        pcount++;
    }
    
    fPeople.close(); 
    
    current = head; person* prevPerson ;  
    while (current->next != NULL)
    {  // (current != null) vs. (current->next != NULL)
        prevPerson = current;
        current = current->next;
    } 
    
    prevPerson->next = NULL; 
    delete newPerson; 
    current = head; 
    cout << "Linked List completed" << endl;

    

    for(int x = 10;x>9;x++)
    {
        int selection;
        cout<<"\n Menu";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\n|***************************************************************|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|*|  1 - Display the people                                   |*|";
        cout<<"\n|*|  2 - Prompt for removing a person                         |*|";
        cout<<"\n|*|  3 - Prompt for adding a person                           |*|";
        cout<<"\n|*|  4 - Add new people to list in bulk from supplemetary file|*|";
        cout<<"\n|*|  5 - Edit a person                                        |*|";
        cout<<"\n|*|  6 - Display all people eligible for social security      |*|";
        cout<<"\n|*|  7 - Display all people at risk of cardiovascular disease |*|";
        cout<<"\n|*|  8 - Display the male:female ratio of the population      |*|";
        cout<<"\n|*|  9 - Find the parents of a person                         |*|";
        cout<<"\n|*| 10 - Find all children of a person                        |*|";
        cout<<"\n|*| 11 - Find all siblings of a person                        |*|";
        cout<<"\n|*| 12 - Find all extended family of a person                 |*|";
        cout<<"\n|*| 99 - Exit                                                 |*|";
        cout<<"\n|*+-----------------------------------------------------------+*|";
        cout<<"\n|***************************************************************|";
        cout<<"\n+---------------------------------------------------------------+";
        cout<<"\n Enter selection: ";
  // read the input
        cin>>selection;
        switch(selection)
        {
            case 1 :
            {cout<<"\n Current Working List \n";
             cout<<"==========================\n";
            display_list(head); break;}
            case 2 :
            {cout<<"\n Removing Person from List \n";
             cout<<"===============================\n";
            cin.clear();
            head = removePerson(&head);
            pcount--;
            break;}
            case 3 :
            {cout<<"\n Adding a Person to List\n";
             cout<<"============================\n";
             addPerson(&head);
             pcount++;
            break;}
            case 4 :
            {cout<<"\n New People Added in Bulk \n";
             cout<<"==============================\n";
            ifstream fNewPeople;
            fNewPeople.open("newpeople.txt");
            add_group(&head, fNewPeople);
            display_list(head);
            pcount = pcount + 5;
            break;
            }
            case 5 :
            {cout<<"\n Edit Person Information" << endl;
             cout<<"=============================\n";
            change_info(head);break;}
            case 6 :
            {cout<<"\n People Eligible for Social Security";
             cout<<"\n=====================================\n";
             social_check(head, pcount);
            break;
            }
            case 7 :
            {cout<<"\n People At Risk Of Cardiovascular Disease";
             cout<<"\n==========================================\n";
             cardio_check(head, pcount);
             break;
            }
            case 8 :
            {cout<<"\nThe Male to Female\n";
             cout<<"======================\n";
             get_ratio(head, pcount);
             break;
            }
            case 9 :
            {cout << "Parent Finder\n";
             cout <<"===============\n";
             find_parents(pcount, head, current); break;}
            case 10 :
            { cout << "Children Finder\n";
             cout <<"===================\n";
                find_children(head, current); break;}
            case 11 :
            {cout << "Sibling Finder\n";
             cout <<"================\n";
            find_siblings(head, current);
            break;
            }
            case 12 :
            {cout<<"\n Find the Extend Family of a Person" << endl;
             cout<<"========================================\n";
            find_exfamily(head);
            break;
            }
            case 99 :{cout<<"\n Program Ended Thank you for Using";return 0;}
            break;
            default : cout<<"\n Invalid selection. Try Again.";
        }
  // no break in the default case
    }
cout<<"\n";
return 0;
}
int get_ratio(person* head, int pcount)
{
            person* current= head;
            float Male=0;
            float Female=0;
            current = head;
            for (int x=0;x<pcount;x++)
            {
                if (current->gender == 'M')
                {
                    Male++;
                }
                if (current-> gender =='F')
                {
                Female++;
                }
            // cout << current->gender<<endl;
            current = current->next;
            }    
            cout<<Male<<" Men";
            cout<<" : "<<Female<< " Women"<<endl;
            cout<< "Females per thousand males: "<<(Female/Male) * 1000<<endl;
           
            
}
int cardio_check(person* head, int pcount)
{
    person* current= head;
    current = head;
    for (int x=0;x<pcount;x++)
     {
        float W = current->weight;
        float H = current->height;
        int BMI;
        BMI = (W / (H*H)*703);
        if (BMI >= 27)
        {
        cout<< current->pName<<endl;
        cout<<"   BMI:";
        cout<< BMI << endl<<endl;
        }
        //weight (lb) / [height (in)]2 x 703
        current = current->next;
        BMI = 0;
     } 
}
int social_check(person* head, int pcount)
{
     person* current= head;
    current = head;
            for (int x=0;x<pcount;x++)
            {
                string str = current->DOB;
                string delim = "/";
                int dd, mm, yyyy;
                size_t pos;
                pos = str.find(delim);
                dd = stoi(str.substr(pos + 4, 2));
                // dd = stoi();
                mm = stoi(str.substr(pos + 1, 2));
                pos = str.find(delim);
                yyyy = stoi(str.substr(pos - 4,4));
                // std::cout << yyyy<<' '<<mm<<' '<<dd<<endl<<endl;
                // current=current->next;
                time_t rawtime;
                struct tm * timeinfo;
                char buffer [80];
                time (&rawtime);
                timeinfo = localtime (&rawtime);
                strftime (buffer,80,"%F",timeinfo);
                string str1 = buffer;
                // cout<<str1;
                string delim1 = "-";
                int dd1, mm1, yyyy1;
                size_t pos1;
                pos1 = str1.find(delim1);
                dd1 = stoi(str1.substr(pos1 + 4, 2));
                mm1 = stoi(str1.substr(pos1 + 1, 2));
                pos1 = str1.find(delim1);
                yyyy1 = stoi(str1.substr(pos1 - 4,4));
                // std::cout <<yyyy1<<'-'<<mm1<<'-'<<dd1<<endl;
                int years = (yyyy1 - yyyy) - 1;
                if (mm1 >= mm)
                {
                    if (dd1 >=dd)
                    {
                        years++;
                    }
                }
                // cout << years<<endl;
                if (years >= 65)
                {
                    cout<<current->pName<<endl;
                    cout<<"Age: "<< years<<endl;
                }
                current=current->next;
                
                
                
            }
}
void display_list(person* head)
{
  person* current= head;
  person* index = NULL; int temp3, temp5, temp6, temp7, temp8, temp2; string temp, temp4;
            while(current != NULL) {
            index = current->next;
                while(index!= NULL) {
                    if(current->pSSN > index->pSSN) {

                        temp = current->pName;
                        current->pName = index->pName;
                        index->pName = temp;
                        
                        temp2 = current->gender;
                        current->gender = index->gender;
                        index->gender = temp2;
                        
                        temp3 = current->pSSN;
                        current->pSSN = index->pSSN;
                        index->pSSN = temp3;
                        
                        temp4 = current->DOB;
                        current->DOB = index->DOB;
                        index->DOB = temp4;
                        
                        temp5 = current->height;
                        current->height = index->height;
                        index->height = temp5;
                        
                        temp6 = current->weight;
                        current->weight = index->weight;
                        index->weight = temp6;
                        
                        temp7 = current->fSSN;
                        current->fSSN = index->fSSN;
                        index->fSSN = temp7;
                        
                        temp8 = current->mSSN;
                        current->mSSN = index->mSSN;
                        index->mSSN = temp8;
                    }    
                    index = index->next;
                }
                current = current->next;
            }
            current = head;
            cout << '\n';
            
            
            while (current != NULL)
            {
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
                << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
                current = current->next; 
            } 
            current = head;  
}
bool change_info(person* head)
{
    person* current = head;
    int inp;
    cout << "Please enter a SSN: " << endl;
    cin >> inp;
    cin.ignore();
    
    while (current != NULL) {
        if (current->pSSN == inp) {
            string new_pName;
            float new_height, new_weight;
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
        << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
            
            cout << "Please enter new name: ";
            getline(cin, new_pName);
            current->pName = new_pName;
            
            
            cout << "Please enter new height: ";
            cin >> new_height;
            current->height = new_height;
            
            cout << "Please enter new weight: ";
            cin >> new_weight;
            current->weight = new_weight;
            
            cout << current->pName << " | " << current->pSSN << " | " << current->gender << " | " << current->DOB << " | " 
        << current->height << " | " << current->weight << " | " << current->fSSN << " | "  << current->mSSN << " | " <<  endl ;
        
        cout << "Info Successfully Changed!" << endl;
            return true;
        }
        current = current->next;
    }
    cout << "SSN Not Found" << endl;
    return false;
}
void find_parents(int num, person* head, person* current)
{
    
    current = head; 
    long inputSSN;
    cout << endl << "Please enter an SSN to find their parents. Type 99 to go back to the menu: ";
    cin >> inputSSN;
    person client[num];

    while (current != NULL)
    {
        if (inputSSN == current->pSSN)
            {
                if (current->mSSN == 0)
                {
                    cout << current->pName << " does not have a mother." << endl << " Father: " << current->fSSN << endl; continue;
                }
                if (current->fSSN == 0)
                {
                    cout << current->pName << " does not have a father." << endl << " Mother: " << current->mSSN << endl; continue;
                }
                else
                cout << "Client: " << current->pName << " | Mother: " << current->mSSN << " | " << "Father: " << current->fSSN << " | " << endl;
            }
        if (inputSSN == 99) break;
        current = current->next; 
    }
}
void find_children(person* head, person* current)
{
    current = head;
    long inputSSN;
    
    cout << endl << "Please enter an SSN to find their children: ";
    cin >> inputSSN;
    
    int childCount = 0;
    string indexName;
    
    while (current != NULL)
    {
        if (inputSSN == current->pSSN) indexName = current->pName;
        current = current->next;
    }
    
    current = head;
    while (current != NULL)
    {
        if (inputSSN != current->fSSN) childCount--; 
        if (inputSSN != current->mSSN) childCount++;
        current = current->next; 
    } 

    current = head;
    if (childCount == 0) cout << indexName << " does not have children." << endl;
    else
    {
        cout << "Parent: \n" << indexName << endl << endl << "Children: \n";
        while (current != NULL)
        {
            if (inputSSN == current->fSSN || inputSSN == current->mSSN) cout << current->pName << " | ";
            current = current->next; 
        }
        cout << endl;
    }
}
person* removePerson(person** head)
{                                                //Menu Option 2

    bool keyFound = false;
    
    string currentLine;

    cin.ignore();

    cout << "Enter the SSN of the person you would like to delete: " << endl;

    getline(cin, currentLine);
    long key = stol(currentLine);

    person* temp = *head;
    person* prev = NULL;

    if(temp != NULL && temp -> pSSN == key){
        *head = temp -> next;
        delete temp;
    } else{
        while(temp != NULL && temp -> pSSN != key){
            prev = temp;
            temp = temp -> next;
            keyFound = true;
        }
    }

    if (temp == NULL){
        cout << "Entered SSN was not found." << endl;
        keyFound = false;
        cin.ignore();
        
        return *head;
    }

    prev -> next = temp -> next;
    delete temp;

    cout << "Deletion completed." << endl;
    cout << "Person " << temp -> pSSN << " deleted." << endl;

    return *head;
}
person* addPerson(person** head)
{                                                   //Menu Option 3
    string usrInp;

    cin.ignore();

    int count = 0;

    person* usrInpPerson = new person;

    //entering information

    cout << "Enter Name to Add: ";
    getline(cin, usrInp);
    usrInpPerson -> pName = usrInp;
    cout << "Enter SSN of Person: ";
    getline(cin, usrInp);
    usrInpPerson -> pSSN = stol(usrInp);
    cout << "Enter Gender of Person : ";
    getline(cin, usrInp);
    usrInpPerson -> gender = usrInp[0];
    cout << "Enter DOB of Person (yyyy/mm/dd): ";
    getline(cin, usrInp);
    usrInpPerson -> DOB = usrInp;
    cout << "Enter Height of Person: ";
    getline(cin, usrInp);
    usrInpPerson -> height = stof(usrInp);
    cout << "Enter Weight of Person: ";
    getline(cin, usrInp);
    usrInpPerson -> weight = stof(usrInp);
    cout << "Enter Mother SSN of Person: ";
    getline(cin, usrInp);
    usrInpPerson -> mSSN = stol(usrInp);
    cout << "Enter Father SSN of Person: ";
    getline(cin, usrInp);
    usrInpPerson -> fSSN = stol(usrInp);

    person* current = *head;

    struct person** headPointer;

    headPointer = head;

    while(current -> next != NULL){
        if(current -> pSSN < usrInpPerson -> pSSN){
            if(current -> next -> pSSN > usrInpPerson -> pSSN){
                person* prev = current;
                usrInpPerson -> next = prev -> next;
                prev -> next = usrInpPerson;
                break;
            }
        } else{
            usrInpPerson -> next = (*headPointer);
            (*headPointer) = usrInpPerson;
            break;
        }
        current = current -> next;
    }
    if(current -> next == NULL){
        usrInpPerson -> next = NULL;
        current -> next =usrInpPerson;
    }
    cout << "New Person has been added to the list!" << endl;
    cout << "Person " << usrInpPerson -> pSSN << " added." << endl;
    return *head;
}
person* add_group(person **head, ifstream& file)
{
    person* current = *head;
    
    while(current->next != NULL) {
        current = current->next;
    }
    
    string line;
    while (!file.eof())
    {
        
        person* newPerson = new person; // independent person 
        current->next = newPerson; // linking persons 
        current = newPerson; 
        
        getline( file, line); 
        current->pName = line;
        getline( file, line); 
        current->gender = line[0];
        getline( file, line); 
        current->pSSN = stol(line);
        getline( file, line); 
        current->DOB = line;
        getline( file, line); 
        current->height = stof(line);
        getline( file, line); 
        current->weight = stof(line);
        getline( file, line); 
        current->fSSN = stol(line);
        getline( file, line); 
        current->mSSN = stol(line);
    }
    
     file.close(); 

    current = *head;

    cout << "Supplementary file added to linked list!" << endl;
    return *head;
}
void find_exfamily(person* head)
{
    person* current = head;
    person* index = NULL; int temp3, temp5, temp6, temp7, temp8, temp2; string temp, temp4;
    while(current != NULL) {
        index = current->next;
        while(index!= NULL) {
            if(current->pSSN > index->pSSN) {
                temp = current->pName;
                current->pName = index->pName;
                index->pName = temp;
                        
                temp2 = current->gender;
                current->gender = index->gender;
                index->gender = temp2;
                        
                temp3 = current->pSSN;
                current->pSSN = index->pSSN;
                index->pSSN = temp3;
                        
                temp4 = current->DOB;
                current->DOB = index->DOB;
                index->DOB = temp4;
                        
                temp5 = current->height;
                current->height = index->height;
                index->height = temp5;
                        
                temp6 = current->weight;
                current->weight = index->weight;
                index->weight = temp6;
                        
                temp7 = current->fSSN;
                 current->fSSN = index->fSSN;
                index->fSSN = temp7;
                        
                temp8 = current->mSSN;
                current->mSSN = index->mSSN;
                index->mSSN = temp8;
                
            }
            index = index->next;
        }
        current = current->next;
    }        
    current = head;
    
 /********************************************************************/   
    string name;
    long SSN, motherSSN, fatherSSN;
    long mothermotherSSN, motherfatherSSN;
    long fathermotherSSN, fatherfatherSSN;
    long sibSSN, auntuncleSSN;
    
    cout << "Please enter the SSN of the desired person you want to find the aunts, uncles, nephews, and nieces of: " << endl;; 
    cin >> SSN;
    cout << endl;
    
    while(current != NULL)
    {
        if(current->pSSN == SSN)
        {
            name = current->pName;
            motherSSN = current->mSSN;
            fatherSSN = current->fSSN;
        }
        current = current->next;
    }
    current = head;
    
/**********************Find Parents**********************************************/    
    //   Mother
    while(current != NULL)
    {
        if(current->pSSN == motherSSN)
        {
            mothermotherSSN = current->mSSN;
            motherfatherSSN = current->fSSN;
        }
        current = current->next;
    }
    current = head;
    
    //father 
    while(current != NULL)
    {
        if(current->pSSN == fatherSSN)
        {
            fathermotherSSN = current->mSSN;
            fatherfatherSSN = current->fSSN;
        }
        current = current->next;
    }
    current = head;
    
/**********************Find Aunts and Uncles**********************************************/   

    while(current != NULL)
    {
        if((((current->mSSN == fathermotherSSN) && (current->pSSN != fatherSSN)) || ((current->fSSN == fatherfatherSSN) && (current->pSSN != fatherSSN))) || (((current->mSSN == mothermotherSSN) && (current->pSSN != motherSSN)) || ((current->fSSN == motherfatherSSN) && (current->pSSN != motherSSN))))
        {
            auntuncleSSN = current->pSSN;
            cout << name << " has the aunts and uncles (in descending order of age): " << current->pName << " | DOB: " << current->DOB << endl;
        }
        current = current->next;
    }
    current = head;
    cout << endl;

/**********************Find Siblings**********************************************/

    while(current != NULL)
    {
        if((((current->mSSN == motherSSN) && (current->pSSN != SSN)) || ((current->fSSN == fatherSSN) && (current->pSSN != SSN))))
        {
            sibSSN = current->pSSN;
        }
        current = current->next;
    }
    current = head;

/**********************Find Nieces and Nephews**********************************************/

    while(current != NULL)
    {
        if((current->mSSN == sibSSN) || (current->fSSN == sibSSN))
        {
            cout << name << " has the nieces and nephews (in descending order of age): " << current->pName << " | DOB: " << current->DOB << endl;
        }
        current = current->next;
    }
    current = head;
    cout << endl;

/**********************Find Cousins**********************************************/

  while(current != NULL)
    {
        if((current->mSSN == auntuncleSSN) || (current->fSSN == auntuncleSSN))
        {
            cout << name << " has the cousins (in descending order of age): " << current->pName << " | DOB: " << current->DOB << endl;
        }
        current = current->next;
    }
    current = head;
    cout << endl;

}
void find_siblings(person* head, person* current)
{
    current = head;
    long inputSSN;
    
    cout << endl << "Please enter an SSN to find their siblings. Type 99 to go back to the menu: ";
    cin >> inputSSN;
    
    if (inputSSN == 99) return;
    
    int numCount = -1;
    long index1, index2;
    string index3;
    
    while (current != NULL)
    {
        if (inputSSN == current->pSSN) 
        {
            index1 = current->mSSN;
            index2 = current->fSSN;
            index3 = current->pName;
            numCount++;
        }
        current = current->next;
    }
    
    current = head;
    if (numCount == 0)
    {
        cout << index3 << "'s siblings are: ";
        while (current != NULL)
        {
            if (index2 == current->fSSN || index1 == current->mSSN) 
            {
                if (current->pName == index3) cout << "";
                else cout << current->pName << " | ";
            }
            current = current->next; 
        }
    }
    else  cout << index3 << " does not have siblings.";
}